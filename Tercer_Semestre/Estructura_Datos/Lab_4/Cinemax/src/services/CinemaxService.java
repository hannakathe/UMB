package services;

import models.CinemaxModel;

import java.util.*;

// Clase que proporciona servicios para gestionar estad√≠sticas de visitas a salas de cine
public class CinemaxService {
    // Lista para almacenar los registros de visitas
    private final List<CinemaxModel> registros = new ArrayList<>();

    // M√©todo para registrar visitas a una sala de cine
    public void registrarVisitas(int semana, int sala, String pelicula, int espectadores) {
        registros.add(new CinemaxModel(semana, sala, pelicula, espectadores));
    }

    // M√©todo para calcular estad√≠sticas de visitas para una semana espec√≠fica
    public String calcularEstadisticas(int semana) {
        // Mapas para almacenar estad√≠sticas por pel√≠cula
        Map<String, Integer> totalPorPelicula = new HashMap<>(); // Total de espectadores por pel√≠cula
        Map<String, Integer> salaMasVista = new HashMap<>();     // M√°ximo de espectadores por pel√≠cula
        Map<String, Integer> salaMenosVista = new HashMap<>();  // M√≠nimo de espectadores por pel√≠cula
        Map<String, Integer> salaPeliMax = new HashMap<>();     // Sala con m√°s visitas por pel√≠cula
        Map<String, Integer> salaPeliMin = new HashMap<>();     // Sala con menos visitas por pel√≠cula

        // Recorrer todos los registros para calcular estad√≠sticas
        for (CinemaxModel registro : registros) {
            if (registro.getSemana() == semana) { // Filtrar por semana
                String pelicula = registro.getPelicula();
                int espectadores = registro.getEspectadores();
                int sala = registro.getSala();

                // Actualizar el total de espectadores por pel√≠cula
                totalPorPelicula.put(pelicula, totalPorPelicula.getOrDefault(pelicula, 0) + espectadores);

                // Determinar la sala con m√°s visitas para cada pel√≠cula
                if (!salaMasVista.containsKey(pelicula) || espectadores > salaMasVista.get(pelicula)) {
                    salaMasVista.put(pelicula, espectadores);
                    salaPeliMax.put(pelicula, sala);
                }

                // Determinar la sala con menos visitas para cada pel√≠cula
                if (!salaMenosVista.containsKey(pelicula) || espectadores < salaMenosVista.get(pelicula)) {
                    salaMenosVista.put(pelicula, espectadores);
                    salaPeliMin.put(pelicula, sala);
                }
            }
        }

        // Determinar la pel√≠cula m√°s y menos vista de la semana
        String peliculaMasVista = Collections.max(totalPorPelicula.entrySet(), Map.Entry.comparingByValue()).getKey();
        String peliculaMenosVista = Collections.min(totalPorPelicula.entrySet(), Map.Entry.comparingByValue()).getKey();

        // Construir el informe de estad√≠sticas
        StringBuilder estadisticas = new StringBuilder();
        estadisticas.append("üìä Estad√≠sticas Semana ").append(semana).append("\n\n");
        for (String pelicula : totalPorPelicula.keySet()) {
            estadisticas.append("üé¨ ").append(pelicula).append("\n");
            estadisticas.append("üë• Total Espectadores: ").append(totalPorPelicula.get(pelicula)).append("\n");
            estadisticas.append("üèÜ Sala con m√°s visitas: Sala ").append(salaPeliMax.get(pelicula)).append(" con ").append(salaMasVista.get(pelicula)).append(" espectadores\n");
            estadisticas.append("üìâ Sala con menos visitas: Sala ").append(salaPeliMin.get(pelicula)).append(" con ").append(salaMenosVista.get(pelicula)).append(" espectadores\n");
            estadisticas.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");
        }

        // A√±adir las pel√≠culas m√°s y menos vistas al informe
        estadisticas.append("üî• Pel√≠cula m√°s vista de la semana: ").append(peliculaMasVista).append("\n");
        estadisticas.append("‚ùÑÔ∏è Pel√≠cula menos vista de la semana: ").append(peliculaMenosVista).append("\n");

        return estadisticas.toString();
    }

    // M√©todo para borrar todas las estad√≠sticas registradas
    public void borrarEstadisticas() {
        registros.clear();
    }
}